{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://dist/./js/modules/tabs.js","webpack://dist/./js/modules/card.js","webpack://dist/./js/services/server.js","webpack://dist/./js/modules/forms.js","webpack://dist/./js/script.js","webpack://dist/./js/modules/modal.js","webpack://dist/./js/modules/timer.js","webpack://dist/./js/modules/calculator.js","webpack://dist/./js/modules/slider.js"],"sourcesContent":["// TABS\r\n\r\nconst tabs = ({itemHeaderClass, itemContentClass, parentSelectorClass, activeClass}) => {\r\n// const tabs = (itemHeaderClass, itemContentClass, parentSelectorClass, activeClass) => { альтернативный вариант без деструктуризации\r\n    const tabsHeader = document.querySelectorAll(itemHeaderClass);\r\n    const tabsContent = document.querySelectorAll(itemContentClass);\r\n    const tabsHeaderParent = document.querySelector(parentSelectorClass);\r\n  \r\n    const hideTabContent = () => {\r\n      tabsContent.forEach((item) => {\r\n        item.classList.add(\"hidden\");\r\n        item.classList.remove(\"show\", \"fade\");\r\n      });\r\n      tabsHeader.forEach((item) => {\r\n        item.classList.remove(activeClass);\r\n      });\r\n    };\r\n  \r\n    const showTabContent = (i = 0) => {       // i в данном случае это первый элемент массива\r\n      tabsContent[i].classList.add(\"show\", \"fade\");\r\n      tabsContent[i].classList.remove(\"hidden\");\r\n      tabsHeader[i].classList.add(activeClass);\r\n    };\r\n  \r\n    hideTabContent();\r\n    showTabContent();\r\n  \r\n    tabsHeaderParent.addEventListener(\"click\", (evt) => {\r\n      const target = evt.target;\r\n      if (target && target.classList.contains(\"tabheader__item\")) {\r\n          tabsHeader.forEach((item, i) => {      // i это номер элемента, который совпал\r\n          if (target === item) {\r\n              hideTabContent();\r\n              showTabContent(i);       \r\n          }\r\n        });\r\n      }\r\n     });\r\n}\r\n\r\n// module.exports = tabs;\r\n\r\nexport default tabs;","// CARDS\r\n// CLASSES FOR CARDS AND CARD CREATION (WITHOUT CLASSES LOOK FOR THE SERVER PART BELOW) \r\n\r\nimport {getData} from \"../services/server\";\r\n\r\nconst cards = () => {\r\nclass MenuCard {\r\n    constructor (img, alt, title, text, price, parentSelector, ...classes) {\r\n      this.img = img;\r\n      this.alt = alt;\r\n      this.title = title;\r\n      this.text = text;\r\n      this.price = price;\r\n      this.classes = classes;\r\n      this.parent = document.querySelector(parentSelector);\r\n      this.currency = 75;\r\n      this.changeToRub();\r\n    }\r\n  \r\n    changeToRub() {\r\n      this.price = this.price * this.currency;\r\n    }\r\n  \r\n    render() {\r\n      const newElement = document.createElement(\"div\");\r\n      if(this.classes.length === 0) {\r\n        this.newElement = \"menu__item\";  // задаем дефолтный класс, если никаких классов в rest операторе нет\r\n        newElement.classList.add(this.newElement);\r\n      } else {\r\n        this.classes.forEach((item) => {\r\n          newElement.classList.add(item);\r\n        });\r\n      }\r\n       newElement.innerHTML = \r\n      `<img src=${this.img} alt=${this.alt}>\r\n      <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n      <div class=\"menu__item-descr\">${this.text}</div>\r\n      <div class=\"menu__item-divider\"></div>\r\n      <div class=\"menu__item-price\">\r\n          <div class=\"menu__item-cost\">Цена:</div>\r\n          <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n      </div>`;\r\n    this.parent.append(newElement);\r\n    }\r\n  }\r\n\r\n  // НА МОКОВЫХ ДАННЫХ \r\n  //    data.forEach((item) => {       // \r\n  //      item = new MenuCard.render()   // создание карточек на основе шаблона в классах (один из вариантов создания карточек)\r\n  //    });\r\n\r\n  /*axios.get(\"http://localhost:3000/menu\")                        // AXIOS служит для обращения к серверу (GEt\\POST) без создания дополнительных функций\r\n  .then(data => {\r\n    data.data.forEach(({img, altimg, title, descr, price}) => {       \r\n      new MenuCard(img, altimg, title, descr, price, \".menu .container\").render()   \r\n    });\r\n  });*/\r\n  \r\n  getData(\"http://localhost:3000/menu\")                            // запрос к серверу (тоже самое ниже вариант 2)\r\n    .then(data => {\r\n      data.forEach(({img, altimg, title, descr, price}) => {       // деструктуризация объекта \r\n        new MenuCard(img, altimg, title, descr, price, \".menu .container\").render()   // создание карточек на основе шаблона в классах (один из вариантов создания карточек)\r\n      });\r\n    });\r\n  \r\n  // getData(\"http://localhost:3000/menu\")                            // запрос к серверу\r\n  //  .then(data => {\r\n  //    data.forEach((item) => {       \r\n  //      item = new MenuCard.render()   // создание карточек на основе шаблона в классах (один из вариантов создания карточек)\r\n  //    });\r\n  //  });\r\n\r\n  /*getData(\"http://localhost:3000/menu\")                       // СОЗДАНИЕ КАРТОЧЕК БЕЗ ШАБЛОНИЗАЦИИ ПО КЛАССАМ\r\n  .then(data => createCard(data));\r\n  \r\n  const createCard = (data) => {\r\n     data.forEach(({img, altimg, title, descr, price}) => {\r\n        const element = document.createElement(\"div\");\r\n        element.classList.add(\"menu__item\");\r\n        element.innerHTML = `\r\n        <img src=${img} alt=${altimg}>\r\n      <h3 class=\"menu__item-subtitle\">${title}</h3>\r\n      <div class=\"menu__item-descr\">${descr}</div>\r\n      <div class=\"menu__item-divider\"></div>\r\n      <div class=\"menu__item-price\">\r\n          <div class=\"menu__item-cost\">Цена:</div>\r\n          <div class=\"menu__item-total\"><span>${price}</span> руб/день</div>\r\n      </div>\r\n        `\r\n        document.querySelector(\".menu .container\").append(element);\r\n     })\r\n  }*/\r\n}\r\n\r\n// module.exports = cards;\r\n\r\nexport default cards;","\"use strict\"\r\n\r\n// вынесли функцию, чтобы применять ее в разных местах\r\n\r\n// Функция для отправки данных на сервер\r\n\r\nconst postData = async (url, data) => {          // внутри функции будет асинхронный код, async и await всегда используются в паре\r\n  const result = await fetch(url, {              // здесь дожидаеся ответа await \r\n    method: \"POST\",                          // отправляем информацию\r\n      headers: {\r\n        \"Content-type\": \"application/json \"       //заголовки нужны для отправки JSON\r\n    },\r\n    body: data                                  // фукнцию postData можно испольоваться как универсальную с различными аргументами\r\n  });\r\n\r\n  return await result.json()\r\n}\r\n\r\n// Функция для получения данных с сервера\r\n\r\nconst getData = async (url) => {          // внутри функции будет асинхронный код, async и await всегда используются в паре, в данной строке получаем информацию\r\n  const result = await fetch(url);\r\n  \r\n  if (!result.ok)           {             // проверяем прошел ли запрос\r\n    throw new Error (`Could not fetch ${url}, status: ${result.status}`);                  // выкидываем ошибку\r\n  }              \r\n  return await result.json ()\r\n}\r\n\r\n// window.server = {          //тоже самое, что и ниже с export (это вариант 1)\r\n//  postData\r\n// }\r\n\r\nexport {postData};\r\nexport {getData};","// SERVER GET/POST FETCH API JSON\r\nimport {postData} from \"../services/server\";\r\n\r\nconst forms = (formSelector) => {           // передаем сюда из основного файла аргумент\r\n  \r\n const forms = document.querySelectorAll(formSelector);\r\n    const  message = {                         // создаем объект с текстовыми сообщениями\r\n      loading: \"img/spinner.svg\",\r\n      success: \"Спасибо и до свидания\",\r\n      error: \"Ошибка\"\r\n    }\r\n                       \r\n    const bindPostData = (form) => {\r\n      const formSendingHandler = (evt) => {\r\n        evt.preventDefault();\r\n       \r\n        const statusMessage = document.createElement(\"img\");    // создаем новый элемент с текстовым сообщением и добавляем его на страницу\r\n        statusMessage.src = message.loading;\r\n        statusMessage.style.cssText = `  \r\n          margin: 0 auto;\r\n          display: block;         \r\n        `;                                                                   // CSS стили пропишем inline\r\n        form.insertAdjacentElement(\"afterEnd\", statusMessage);              // вставляем элемент после формы\r\n        \r\n        const formData = new FormData(form);   // собираем данные из формы, которые будем отправлять, как аргумент передается форма с которой собираем данные\r\n                                               // !!! в html всегда обязательно указывать артрибут name=\"name\" для интерактивных полей (input, textarea и т.д.) иначе FormData не найдет его !!!\r\n  \r\n        /*const object = {};                        \r\n          formData.forEach(function(value, key) {  // ДЛЯ JSON  перебираем formData и формируем новый объект, так как JSON не примет formData другим образом\r\n            object[key] = value;\r\n        })*/                                        // заменили на способ ниже\r\n  \r\n        const json = JSON.stringify(Object.fromEntries(formData.entries())); // превращаем formData в массив массивов, затем в классический объект и затем в json\r\n  \r\n        //  Object.entries(obj) преобразует объект в массив массивов [key, value]\r\n        //  Object.fromEntries(array); преобразует массив в объект\r\n  \r\n        /*fetch(\"server.php\", {                     // обращаемся к серверу, вынесли это в отдельную функцию PostData\r\n          method: \"POST\",                          // отправляем информацию\r\n          headers: {\r\n            \"Content-type\": \"application/json \"       //заголовки нужны для отправки JSON\r\n          },\r\n          body: json                             // сюда передаем json\r\n        })*/\r\n\r\n        // window.server.postData(postData(\"http://localhost:3000/requests\", json))   // вариант 1 (см server.js)\r\n        postData(\"http://localhost:3000/requests\", json)  // ДЛЯ JSON подготтавливаем данные для сервера, функцию импортировали и она будет отрабатывать тут\r\n        .then(data => {                             // с сервера вернется какая-то информация\r\n          console.log(data);\r\n          showThanksModal(message.success);                                       \r\n          statusMessage.remove();                      // удаляем сообщение через 2 секунды\r\n        }).catch(() => {\r\n          showThanksModal(message.error);                // если внутри fetch promise попадает на ошибку (404, 502 и т.д.), то reject не будет и promise выполниться, ошибка сработает только при отсутствии интернета\r\n        }).finally(() => {\r\n          form.reset();                              // очистка формы, также можно взять инпуты и сделать их value === \"\";\r\n        })   \r\n      }\r\n      const hideModalWindow = window.modal.hideModalWindow;\r\n      form.addEventListener(\"submit\", formSendingHandler)\r\n      form.addEventListener(\"submit\", hideModalWindow)\r\n    }\r\n  \r\n    forms.forEach((item) => {   // для каждой формы запускаем функцию postData и передаем в нее как аргумент форму\r\n      bindPostData(item);\r\n    });\r\n   \r\n    const showThanksModal = (message) => {                                    // сюда передаем как аргумент сообщение пользователю из объекта message\r\n      const thanksModal = document.createElement(\"div\");                      // создаем новую начинку модального окна для сообщения пользователю\r\n      thanksModal.classList.add(\"modal__message\");           \r\n      thanksModal.innerHTML = `\r\n      <div class=\"modal__dialog\">\r\n        <div class=\"modal__content\">\r\n          <div class=\"modal__close\" data-close>×\r\n          </div>\r\n          <div class=\"modal__title\">${message}</div>\r\n        </div>\r\n      <div>\r\n      `; \r\n      document.querySelector(\".page\").append(thanksModal);            // добавляем в модальное окно новое наполнение\r\n      setTimeout(() => {                                               // через определенное время удаляем сообщение пользователю и возвращаем обратно возможность вызвать и отправить форму\r\n        thanksModal.remove();\r\n      }, 4000)\r\n      const modalMessage = document.querySelector(\".modal__message\");\r\n      const modalClose = modalMessage.querySelector(\".modal__close\");\r\n      const closeThanksModal = () => {\r\n        thanksModal.remove();\r\n      }\r\n      modalClose.addEventListener(\"click\", closeThanksModal);\r\n    }      \r\n  \r\n    fetch(\"db.json\")\r\n      .then(data => data.json())\r\n      .then(result => console.log(result))\r\n}\r\n\r\n// module.exports = forms;\r\n\r\nexport default forms;","import tabs from './modules/tabs';\r\nimport modal from './modules/modal';\r\nimport timer from './modules/timer';\r\nimport card from './modules/card';\r\nimport calculator from './modules/calculator';\r\nimport forms from './modules/forms';\r\nimport slider from './modules/slider';\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n    /*const tabs = require('./modules/tabs'),\r\n        modal = require('./modules/modal'),\r\n        timer = require('./modules/timer'),\r\n        card = require('./modules/card'),\r\n        calculator = require('./modules/calculator'),\r\n        server = require('./modules/server'),\r\n        slider = require('./modules/slider');\r\n    \r\n    tabs();\r\n    modal();\r\n    timer();\r\n    card();\r\n    calculator();\r\n    server();\r\n    slider();*/ // старый метод для прнименения с module.exports = calculator \r\n    \r\n    tabs({\r\n        itemHeaderClass: '.tabheader__item', \r\n        itemContentClass: '.tabcontent', \r\n        parentSelectorClass: '.tabheader__items', \r\n        activeClass:'tabheader__item--active'\r\n    }); // здесь прописываем классы, которые передаем как аргументы функции\r\n    // tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item--active') // альтернативный вариант без деструктуризации\r\n    modal();\r\n    timer(\".timer\", \"2021-12-31\");\r\n    card();\r\n    calculator();\r\n    forms(\"form\");    // сюда как аргумент передаем все формы\r\n    slider({  // деструктруризация, можно и без нее (смотри tabs)\r\n        container: '.offer__slider',\r\n        slide: '.offer__slide',\r\n        prevButton: '.offer__slider-prev',\r\n        nextButton: '.offer__slider-next',\r\n        totalCounter: '#total',\r\n        currentCounter: '#current',\r\n        wrapper: '.offer__slider-wrapper',\r\n        field: '.offer__slider-inner'\r\n    });\r\n});\r\n","// MODAL\r\n\r\nconst modal = () => {\r\nconst openModalButtons = document.querySelectorAll(\".btn_open_modal\");\r\nconst modal = document.querySelector(\".modal\");\r\nconst modalCloseButton = document.querySelector(\".modal__close\");\r\n\r\nconst modalEscPressHandler = (evt) => {\r\n  if (evt.key === \"Escape\") {\r\n    hideModalWindow();\r\n    evt.preventDefault();\r\n  }\r\n};\r\n\r\nconst windowClickHandler = (evt) => {\r\n  if (evt.target === modal) {\r\n    hideModalWindow();\r\n  }\r\n};\r\n\r\nconst openModalWindow = () => {\r\n  modal.classList.add(\"show\");\r\n  document.addEventListener(\"keydown\", modalEscPressHandler);\r\n  modal.addEventListener(\"click\", windowClickHandler);\r\n  modalCloseButton.addEventListener(\"click\", hideModalWindow);\r\n  document.body.style.overflow = \"hidden\";\r\n  clearInterval(modalTimerId);  // если модальное окно уже было открыто, то обнуляем setTimeout \r\n};\r\n\r\nconst hideModalWindow = () => {\r\n  modal.classList.remove(\"show\");\r\n  document.removeEventListener(\"keydown\", modalEscPressHandler);\r\n  modal.removeEventListener(\"click\", windowClickHandler);\r\n  modalCloseButton.removeEventListener(\"click\", hideModalWindow);\r\n  document.body.style.overflow = \"visible\";\r\n};\r\n\r\nopenModalButtons.forEach((item) => {\r\n  item.addEventListener(\"click\", openModalWindow);\r\n});\r\n\r\nconst modalTimerId = setTimeout(openModalWindow, 50000); // запускаем модалку через 5 секунд\r\n\r\nconst showModalByScroll = () => {\r\n  if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight){   // пользователь докрутил до конца страницы (сравниваем видимый контент на странице + сколько уже прокручено со всей высотой скролла)\r\n    openModalWindow(); \r\n    window.removeEventListener(\"scroll\", showModalByScroll);\r\n   }\r\n};\r\n// {once: true} это заставляет обработчик сработать один раз, но в данном случае не подходит\r\n// сдвинуть колд вправо tab\r\n// сдвинуть код влево shift+tab\r\nwindow.addEventListener(\"scroll\", showModalByScroll); \r\n\r\n  window.modal = {\r\n    hideModalWindow\r\n  }\r\n}\r\n\r\n// module.exports = modal;\r\n\r\nexport default modal;","// TIMER\r\n\r\nconst timer = (id, deadline) => {\r\n  \r\n   const getRemainingTime = (endtime) => {\r\n       const t = Date.parse(endtime) - Date.parse(new Date()); // конечная дата минус текущая дата\r\n       const days = Math.floor( (t/(1000*60*60*24)) );  \r\n       const seconds = Math.floor( (t/1000) % 60 );\r\n       const minutes = Math.floor( (t/1000/60) % 60 );\r\n       const hours = Math.floor( (t/(1000*60*60) % 24) );\r\n   \r\n       return {\r\n           'total': t,\r\n           'days': days,\r\n           'hours': hours,\r\n           'minutes': minutes,\r\n           'seconds': seconds\r\n       };\r\n   };\r\n   \r\n   const getZero = (num) => {  // проверяем число и добавляем 0, если меньше 10\r\n     if (num >= 0 && num < 10) {\r\n       return `0${num}`;\r\n     } else {\r\n         return num;\r\n     }\r\n   };\r\n   \r\n   const setClock = (selector, endtime) => {    // сюда передаем два аргумента,в том числе конучную дату\r\n   \r\n       const timer = document.querySelector(selector);\r\n       const days = timer.querySelector(\"#days\");  // выбираем по id раздел\r\n       const  hours = timer.querySelector('#hours'); // выбираем по id раздел\r\n       const  minutes = timer.querySelector('#minutes'); // выбираем по id раздел\r\n       const  seconds = timer.querySelector('#seconds'); // выбираем по id раздел\r\n       const timeInterval = setInterval(updateClock, 1000);  // функция обновления значения каждую секунду\r\n       updateClock();\r\n       function updateClock()  {\r\n           const t = getRemainingTime(endtime);\r\n           days.innerHTML = getZero(t.days);\r\n           hours.innerHTML = getZero(t.hours);\r\n           minutes.innerHTML = getZero(t.minutes);\r\n           seconds.innerHTML = getZero(t.seconds);\r\n   \r\n           if (t.total <= 0) {\r\n               clearInterval(timeInterval);\r\n           }\r\n        }\r\n    };\r\n   \r\n   setClock(id, deadline);\r\n}\r\n\r\n// module.exports = timer;\r\n\r\nexport default timer;","// CALCULATOR\r\n\r\nconst calculator = () => {\r\n    \r\nconst result = document.querySelector(\".calculating__result span\"); // поле вывода результата\r\n\r\n let sex;                                                          \r\n let height;                               \r\n let weight;                                          \r\n let age;\r\n let ratio;                               \r\n\r\n if (localStorage.getItem(\"sex\")) {                    // если в localStorage есть данные используем их, если нет задаем дефолтное значение\r\n   sex = localStorage.getItem(\"sex\")\r\n } else {\r\n   sex = \"female\";\r\n   localStorage.setItem(\"sex\", \"female\")\r\n }\r\n\r\n if (localStorage.getItem(\"ratio\")) {                    // если в localStorage есть данные используем их, если нет задаем дефолтное значение\r\n   ratio = localStorage.getItem(\"ratio\")\r\n } else {\r\n   ratio = \"1.375\";\r\n   localStorage.setItem(\"ratio\", \"1.375\")\r\n }\r\n\r\n const initLocalSettings = (selector) => {                    // функция для localStorage\r\n    const elements = document.querySelectorAll(selector);\r\n    elements.forEach((element) => {\r\n     element.classList.remove(\"calculating__choose-item_active\")\r\n     if (element.getAttribute(\"id\") === localStorage.getItem(\"sex\")) {\r\n        element.classList.add(\"calculating__choose-item_active\")\r\n     }\r\n     if (element.getAttribute(\"data-ratio\") === localStorage.getItem(\"ratio\")) {\r\n       element.classList.add(\"calculating__choose-item_active\")\r\n     }\r\n    })\r\n }\r\n initLocalSettings(\"#gender div\")\r\n initLocalSettings(\".calculating__choose_big div\")\r\n\r\n const calcTotal = () => {                                       \r\n   if (!sex || !height || !weight || !age ||!ratio) {             // при отсутсивии данных выдаем ошибку\r\n       result.textContent = \"___\"\r\n       return                                                     // досрочно прерываем функцию\r\n   } \r\n\r\n   if (sex === \"female\") {                                         // если пол женский\r\n      result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio)     // здесь берем формулу расчета каллорий и умножаем на уровень активности (см дата атрибуты в верстке у полей активности)\r\n   } else {                                                                                                  // округляем все до целого числа\r\n     result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio)      // здесь тоже самое, что для женщин только для мужчин уже новая формула\r\n   }\r\n }\r\n calcTotal()\r\n\r\n const getStaticInformation = (selector) => {              // как аргумент передаем родителя и класс активности\r\n    const elements = document.querySelectorAll(selector)         // получаем все дивы внутри родителя\r\n    \r\n\r\n    elements.forEach((element) => {\r\n      element.addEventListener(\"click\", (evt) => {\r\n       if (evt.target.getAttribute(\"data-ratio\")) {                            // если у элемента есть дата атрибут\r\n          ratio = evt.target.getAttribute(\"data-ratio\")        // переменная ratio будет = значению, написанному в дата атрибуте в верстке\r\n          localStorage.setItem(\"ratio\", evt.target.getAttribute(\"data-ratio\"))  // записываем значение в localStorage\r\n       } else {\r\n         sex = evt.target.getAttribute(\"id\");                       // обращаемся к полям у которых нет дата атрибута, а есть id\r\n         localStorage.setItem(\"sex\", evt.target.getAttribute(\"id\"))  // записываем значение в localStorage\r\n       }\r\n      \r\n   \r\n       elements.forEach((item) => {                           // удаляем класс активности у всех элементов\r\n         item.classList.remove(\"calculating__choose-item_active\");\r\n       })\r\n       evt.target.classList.add(\"calculating__choose-item_active\");                // добавляем класс активности туда куда кликнули\r\n       calcTotal()                                    // каждый раз вызываем функцию пересчета\r\n     }) \r\n   })   \r\n }\r\n\r\n\r\n getStaticInformation(\"#gender div\")  // передаем как аргумент div внутри родителя\r\n getStaticInformation(\".calculating__choose_big div\")  // передаем сюда div внутри родителя\r\n // Вызываем функцию два раза, так как у нас два блока элементов: М\\Ж и блоки активности\r\n\r\n const getDynamycInformation = (id) => {\r\n    const input = document.querySelector(id);\r\n    input.addEventListener(\"input\", () => {\r\n       if (input.value.match(/\\D/g)) {                 // проверяем инпут на буквы и если вводятся не цифры, то красный бордер\r\n          input.style.border = \"1px solid red\"\r\n       } else {\r\n         input.style.border = \"none\"\r\n       }\r\n\r\n      switch(input.getAttribute(\"id\")) {             // проверяем на id инпуты, каждый раз когда будет что-то вводиться, то проверяется id и записывается соответствующее значение\r\n        case \"height\": \r\n           height = input.value;\r\n           break;\r\n        case \"weight\":\r\n           weight = input.value;\r\n           break;\r\n         case \"age\":\r\n           age = input.value;\r\n           break;\r\n        }\r\n        calcTotal()                              // каждый раз вызываем функцию пересчета\r\n    })\r\n  }\r\n getDynamycInformation(\"#height\")     // вызываем функцию с тремя разными id\r\n getDynamycInformation(\"#weight\")\r\n getDynamycInformation(\"#age\")\r\n}\r\n// module.exports = calculator; старый вариант \r\n\r\nexport default calculator;","// SLIDER\r\n\r\nconst slider= ({container, slide, nextButton, prevButton, totalCounter, currentCounter,wrapper, field}) => { // какая-то деструктуризация тут\r\n // SLIDER VARIANT 1  (скрытие карточек)\r\n\r\n  /*const slides = document.querySelectorAll(\".offer__slide\");\r\n  const previousSlideButton = document.querySelector(\".offer__slider-prev\");\r\n  const nextSlideButton = document.querySelector(\".offer__slider-next\");\r\n  const total = document.querySelector(\"#total\");\r\n  const current = document.querySelector(\"#current\");\r\n  let currentSlide = 1;                           \r\n\r\n  const showCurrentSlideNumber = () => {                       // устанавливаем значение конкретного слайда\r\n    if (slides.length < 10) {\r\n      current.textContent = `0${currentSlide}`;\r\n    } else {\r\n      current.textContent = currentSlide;\r\n    }\r\n  }\r\n\r\n  const showTotalSlidesQuantity = () => {                       // устанавливаем значение общего количества слайдов\r\n    if (slides.length < 10) {\r\n      total.textContent = `0${slides.length}`;\r\n    } else {\r\n      total.textContent = slides.length;\r\n    }\r\n  }\r\n  showTotalSlidesQuantity();\r\n\r\n  const showSlides = (number) => {            // функция принимает n куда будет приходит номер текущего слайда\r\n    if (number > slides.length) {\r\n      currentSlide = 1;                      // если n больше количества слайдов, то идет возврат на первый слайд\r\n    }\r\n    if (number < 1) {\r\n      currentSlide = slides.length;          // если n меньше количества слайдов, то идет возврат на последний слайд\r\n    }\r\n\r\n    slides.forEach((item) => {               // скрываем все слайды\r\n      item.style.display = \"none\"\r\n    })\r\n\r\n    slides[currentSlide - 1].style.display = \"block\"     // показываем только первый, так как массив начинается с 0, то указываем - 1, так как currentSlide = 1;\r\n    showCurrentSlideNumber()                                   // запускаем функции показа номера конкретного слайда\r\n  }\r\n  showSlides(currentSlide);\r\n  \r\n\r\n  const changeSlides = (number) => {\r\n    showSlides(currentSlide = currentSlide + number);\r\n  }\r\n\r\n  previousSlideButton.addEventListener(\"click\", () => {\r\n    changeSlides(-1);\r\n  })\r\n\r\n  nextSlideButton.addEventListener(\"click\", () => {\r\n    changeSlides(+1);\r\n  })*/\r\n\r\n  // SLIDER VARIANT 2 (проллистывание карточек)\r\n    \r\n  const slides = document.querySelectorAll(slide);\r\n  const slider = document.querySelector(container)\r\n  const previousSlideButton = document.querySelector(prevButton);\r\n  const nextSlideButton = document.querySelector(nextButton);\r\n  const total = document.querySelector(totalCounter);\r\n  const current = document.querySelector(currentCounter);\r\n  const slidesWrapper = document.querySelector(wrapper);\r\n  const slidesInner = document.querySelector(field);\r\n  const width = window.getComputedStyle(slidesWrapper).width;                               // ширина блока где находятся слайдеры\r\n  let currentSlide = 1; \r\n  let offset = 0;                                                  // на какое расстояние мы смещаемся, отсчет от 0   \r\n\r\n  const showTotalSlidesQuantity = () => {                       // устанавливаем значение общего количества слайдов\r\n    if (slides.length < 10) {\r\n      total.textContent = `0${slides.length}`;\r\n      current.textContent = `0${currentSlide}`;\r\n    } else {\r\n      total.textContent = slides.length;\r\n      current.textContent = currentSlide;\r\n    }\r\n  }\r\n  showTotalSlidesQuantity();\r\n\r\n  slidesInner.style.width = 100 * slides.length + \"%\";             // задаем внутренней обложке общую ширину (от количества всех слайдов)\r\n  slidesInner.style.display = \"flex\";                              \r\n  slidesInner.style.transition = \"0.5s all\";                       // плавное смещение всех слайдов\r\n  slidesWrapper.style.overflow = \"hidden\";\r\n  \r\n  slides.forEach((slide) => {\r\n    slide.style.width = width;                                     // каждому слайду устанавливаем ширину равную ширине обертки, все слайды будут одинаковой ширины и внутри обертки\r\n  })\r\n\r\n  slider.style.position = \"relative\";                            \r\n\r\n  const dots = document.createElement(\"ol\");                     // создаем список для кнопок переключения слайдов\r\n  const dotsArray = [];                                          // создаем пустой массив\r\n  dots.classList.add(\"carousel-indicators\");\r\n  slider.append(dots);\r\n\r\n  for (let i = 0; i < slides.length; i++) {                       // создаем кнопки переключения слайдов в количестве совпадающим с количеством слайдов\r\n     const dot = document.createElement(\"li\");\r\n     dot.setAttribute(\"data-slide-to\", i + 1);                    // пронумеровываем каждую кнопку\r\n     dot.classList.add(\"dot\")\r\n     if (i === 0) {\r\n       dot.style.opacity = 1;                                     // задаем активную кнопку через JS (без CSS)\r\n     }\r\n     dots.append(dot)\r\n     dotsArray.push(dot);                                         // помещаем в массив наши точки\r\n  };\r\n \r\n  const deleteLetters = (string) => {                    // функция для замены значения width на числовое с помощью + и далее исключение \"px\" через replace\r\n     return +string.replace(/\\D/g, \"\");\r\n  }\r\n\r\n  nextSlideButton.addEventListener(\"click\", () => {\r\n    if (offset === deleteLetters(width) * (slides.length - 1)) {                 // если отступ будет равен ширине всех слайдов, то возвращаем отступ к базовому значению, также width превращаем в число унарным + и заменяем \"px\" через ругулярное выражение\r\n      offset = 0;\r\n    }  else {\r\n      offset = offset + deleteLetters(width);                       // в противоположном случае смещаем на ширину одного слайда (+width.replace(/\\D/g, \"\"))\r\n    }                                                                                // ширина всех слайдов +width.replace(/\\D/g, \"\") * (slides.length - 1)\r\n    slidesInner.style.transform = `translateX(-${offset}px)`                         // передвигаем элемент по оси X влево при клике\r\n\r\n    if (currentSlide === slides.length) {                                   // если нумерация слайдов равна количеству слайдов, то возвращаем значение к базовому\r\n      currentSlide = 1;\r\n    } else {\r\n      currentSlide++;                                       // в ином случае увеличиваем значение на 1\r\n    }\r\n\r\n    if (slides.length < 10) {\r\n      current.textContent =  `0${currentSlide}`;\r\n    } else {\r\n      current.textContent =  currentSlide;\r\n    }\r\n    dotsArray.forEach((dot) => {                    // перебираем массив точек и присваиваем значение прозрачности при клике\r\n      dot.style.opacity = \"0.5\"\r\n    });\r\n    dotsArray[currentSlide-1].style.opacity = \"1\";        // так как массив начинается с 0, то указываем - 1, так как currentSlide = 1;\r\n  })\r\n\r\n  previousSlideButton.addEventListener(\"click\", () => {                               \r\n    if (offset === 0) {                                                            // если мы на первом слайде, то переносимся на последний       \r\n      offset = deleteLetters(width) * (slides.length - 1)\r\n    }  else {\r\n      offset = offset - deleteLetters(width);                      \r\n    }                                           \r\n    slidesInner.style.transform = `translateX(-${offset}px)`                 // передвигаем элемент по оси X вправо при клике     \r\n    \r\n    if (currentSlide === 1) {                                  // если нумерация слайдов равна 1, то возвращаем значение к значению последнего слайда\r\n      currentSlide = slides.length; \r\n  } else {\r\n      currentSlide--;                                           // в ином случае уменьшаем значение на 1\r\n  }\r\n\r\n  if (slides.length < 10) {\r\n      current.textContent =  `0${currentSlide}`;\r\n  } else {\r\n    current.textContent = currentSlide;\r\n  }\r\n  dotsArray.forEach((dot) => {\r\n    dot.style.opacity = \"0.5\"\r\n  });\r\n  dotsArray[currentSlide-1].style.opacity = \"1\";\r\n });\r\n\r\n\r\n dotsArray.forEach((dot) => {\r\n  dot.addEventListener('click', (evt) => {\r\n      const slideTo = evt.target.getAttribute('data-slide-to');  // находим все кнопки по атрибуту, который присвоили ранее\r\n\r\n      currentSlide = slideTo;                                         \r\n      offset = deleteLetters(width) * (slideTo - 1);\r\n\r\n      slidesInner.style.transform = `translateX(-${offset}px)`;\r\n\r\n      if (slides.length < 10) {\r\n          current.textContent =  `0${currentSlide}`;\r\n      } else {\r\n          current.textContent =  currentSlide;\r\n      }\r\n\r\n      dotsArray.forEach((dot) => {\r\n        dot.style.opacity = \"0.5\"\r\n      });\r\n      dotsArray[currentSlide-1].style.opacity = \"1\";\r\n    });\r\n  });\r\n\r\n}\r\n\r\n// module.exports = slider;\r\n\r\nexport default slider;"],"names":["MenuCard","constructor","img","alt","title","text","price","parentSelector","this","classes","parent","document","querySelector","currency","changeToRub","render","newElement","createElement","length","classList","add","forEach","item","innerHTML","append","async","result","fetch","url","ok","Error","status","json","getData","then","data","altimg","descr","formSelector","forms","querySelectorAll","form","hideModalWindow","window","modal","addEventListener","evt","preventDefault","statusMessage","src","style","cssText","insertAdjacentElement","formData","FormData","method","headers","body","postData","JSON","stringify","Object","fromEntries","entries","console","log","showThanksModal","remove","catch","finally","reset","bindPostData","message","thanksModal","setTimeout","itemHeaderClass","itemContentClass","parentSelectorClass","activeClass","tabsHeader","tabsContent","tabsHeaderParent","hideTabContent","showTabContent","i","target","contains","tabs","openModalButtons","modalCloseButton","modalEscPressHandler","key","windowClickHandler","openModalWindow","overflow","clearInterval","modalTimerId","removeEventListener","showModalByScroll","pageYOffset","documentElement","clientHeight","scrollHeight","id","deadline","getZero","num","selector","endtime","timer","days","hours","minutes","seconds","timeInterval","setInterval","updateClock","t","Date","parse","Math","floor","getRemainingTime","total","setClock","card","sex","height","weight","age","ratio","localStorage","getItem","setItem","initLocalSettings","element","getAttribute","calcTotal","textContent","round","getStaticInformation","elements","getDynamycInformation","input","value","match","border","calculator","container","slide","nextButton","prevButton","totalCounter","currentCounter","wrapper","field","slides","slider","previousSlideButton","nextSlideButton","current","slidesWrapper","slidesInner","width","getComputedStyle","currentSlide","offset","display","transition","position","dots","dotsArray","dot","setAttribute","opacity","push","deleteLetters","string","replace","transform","slideTo"],"sourceRoot":""}